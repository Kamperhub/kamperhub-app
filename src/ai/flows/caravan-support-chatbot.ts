
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A caravan support chatbot AI agent.
 *
 * - caravanSupportChatbot - A function that handles the chatbot interaction.
 * - CaravanSupportChatbotInput - The input type for the caravanSupportChatbot function.
 * - CaravanSupportChatbotOutput - The return type for the caravanSupportChatbot function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { staticCaravanningArticles, type AiGeneratedArticle } from '@/types/learn';

const CaravanSupportChatbotInputSchema = z.object({
  question: z.string().describe('The question asked by the user about caravanning.'),
});
export type CaravanSupportChatbotInput = z.infer<typeof CaravanSupportChatbotInputSchema>;

const CaravanSupportChatbotOutputSchema = z.object({
  answer: z.string().describe('The answer to the user question.'),
  youtubeLink: z.string().optional().nullable().describe('An optional YouTube link that provides more information about the answer.'),
  relatedArticleTitle: z.string().optional().nullable().describe('The title of a related article from the Support Center, if applicable.')
});
export type CaravanSupportChatbotOutput = z.infer<typeof CaravanSupportChatbotOutputSchema>;

// Simple FAQ knowledge base
const faqData = [
  { 
    keywords: ["tyre pressure", "tire pressure", "tyres", "tires"], 
    answer: "Caravan tyre pressures are crucial for safety and tyre life. They typically range from 40-65 PSI, but always check the caravan's tyre placard or the tyre manufacturer's specific recommendations for your model and load. Tow vehicle tyre pressures should also be adjusted as per its placard, especially when towing." 
  },
  { 
    keywords: ["awning setup", "set up awning", "deploy awning"], 
    answer: "To set up your caravan awning: 1. Unlock any travel locks. 2. Use the awning rod to hook the pull strap and roll the awning out. 3. Extend the support legs and position them vertically or against the caravan wall. 4. Secure the legs. 5. Tension the fabric using the rafters or tensioning knobs. Ensure it's well-secured, especially if wind is expected." 
  },
  { 
    keywords: ["battery flat", "battery dead", "charge battery"], 
    answer: "If your caravan battery is flat: 1. Check if it's an issue with the charger or a blown fuse. 2. Try charging it using your tow vehicle (if set up for it), a 240V smart charger when connected to mains power, or a solar panel. 3. If it's an old battery, it might need replacement. Deep cycle batteries can be damaged if left flat for too long." 
  },
  {
    keywords: ["toilet cassette", "empty toilet"],
    answer: "To empty your caravan toilet cassette: 1. Ensure the blade valve is closed. 2. Remove the cassette from its external hatch. 3. Transport it to an approved dump point. 4. Unscrew the spout, point it downwards into the dump point, and press the air vent button to empty smoothly. 5. Rinse the cassette with water. 6. Add the appropriate toilet chemical before reinserting."
  },
  {
    keywords: ["sway control", "caravan swaying"],
    answer: "Caravan sway can be dangerous. To prevent it: 1. Ensure correct weight distribution (approx 10-15% of caravan ATM on the towball). 2. Don't overload the rear of the caravan. 3. Check tyre pressures. 4. Drive at appropriate speeds for conditions. 5. Consider using a weight distribution hitch and/or an electronic sway control system. If sway occurs, gently ease off the accelerator and apply the caravan's electric brakes manually (if fitted with a controller that allows this) â€“ do not slam on the vehicle brakes or turn the steering wheel sharply."
  }
];

const getFaqAnswer = ai.defineTool(
  {
    name: 'getFaqAnswer',
    description: 'Retrieves a pre-defined answer to a frequently asked caravanning question from the local knowledge base. Use this tool first to check for existing answers.',
    inputSchema: z.object({
      topicKeywords: z.string().describe('One or more keywords from the user question related to the topic they are asking about (e.g., "tyre pressure", "awning setup").'),
    }),
    outputSchema: z.string().optional().describe('The answer from the FAQ if a match is found, otherwise undefined.'),
  },
  async ({ topicKeywords }) => {
    const lowerTopicKeywords = topicKeywords.toLowerCase().split(/\s+/).filter(kw => kw.length > 2); // Split into words
    for (const faq of faqData) {
      if (faq.keywords.some(kw => lowerTopicKeywords.some(userKw => kw.toLowerCase().includes(userKw)))) {
        return faq.answer;
      }
    }
    return undefined; // No specific FAQ found
  }
);

const getArticleInfoTool = ai.defineTool(
  {
    name: 'getArticleInfoTool',
    description: 'Searches the static article database for relevant information based on user keywords. Use this if no direct FAQ answer is found.',
    inputSchema: z.object({
      searchKeywords: z.string().describe('Keywords from the user question to find a relevant article (e.g., "parking caravan", "battery management").'),
    }),
    outputSchema: z.object({
      title: z.string(),
      summary: z.string(), // The introduction of the article
      topic: z.string(),
    }).optional().describe('The title, introduction (as summary), and topic of a relevant article if found, otherwise undefined.'),
  },
  async ({ searchKeywords }) => {
    const lowerKeywords = searchKeywords.toLowerCase().split(/\s+/).filter(kw => kw.length > 2); // Split into words, ignore small words
    if (lowerKeywords.length === 0) return undefined;

    for (const article of staticCaravanningArticles) {
      const searchableText = `${article.topic.toLowerCase()} ${article.title.toLowerCase()} ${article.introduction.toLowerCase()}`;
      if (lowerKeywords.every(kw => searchableText.includes(kw))) { // All keywords must be present
        return {
          title: article.title,
          summary: article.introduction,
          topic: article.topic,
        };
      }
    }
    // Fallback: check if any keyword matches
     for (const article of staticCaravanningArticles) {
      const searchableText = `${article.topic.toLowerCase()} ${article.title.toLowerCase()} ${article.introduction.toLowerCase()}`;
      if (lowerKeywords.some(kw => searchableText.includes(kw))) {
        return {
          title: article.title,
          summary: article.introduction,
          topic: article.topic,
        };
      }
    }
    return undefined;
  }
);


const findYoutubeLink = ai.defineTool(
  {
    name: 'findYoutubeLink',
    description: 'Finds a relevant YouTube video link based on the user question topic. Use this if a visual explanation would be helpful.',
    inputSchema: z.object({
      searchQuery: z.string().describe('A concise search query based on the user question to find a relevant YouTube video.'),
    }),
    outputSchema: z.string().optional(),
  },
  async (input) => {
    // This is a placeholder implementation.
    if (input.searchQuery.toLowerCase().includes('weight limits')) {
      return 'https://www.youtube.com/watch?v=M7lc1UVf-VE';
    }
    if (input.searchQuery.toLowerCase().includes('awning')) {
        return 'https://www.youtube.com/watch?v=L_jWHffIx5E';
    }
    return undefined;
  }
);

export async function caravanSupportChatbot(input: CaravanSupportChatbotInput): Promise<CaravanSupportChatbotOutput> {
  return caravanSupportChatbotFlow(input);
}

const prompt = ai.definePrompt({
  name: 'caravanSupportChatbotPrompt',
  input: {schema: CaravanSupportChatbotInputSchema},
  output: {schema: CaravanSupportChatbotOutputSchema},
  tools: [getFaqAnswer, getArticleInfoTool, findYoutubeLink],
  prompt: `You are a friendly and helpful caravan support chatbot for KamperHub. Your primary goal is to provide accurate and useful answers to user questions about caravanning.

When a user asks a question:
1. First, use the 'getFaqAnswer' tool to check if there's a pre-defined answer for the topic in our local knowledge base. Provide relevant keywords from the user's question to this tool.
2. If the 'getFaqAnswer' tool returns an answer, use this information as the core of your response. Rephrase it slightly to be conversational if needed, but ensure the factual content comes from the tool's output. Set 'relatedArticleTitle' to null.
3. If 'getFaqAnswer' does not return an answer, then use the 'getArticleInfoTool' with keywords from the user's question to search our published articles.
4. If the 'getArticleInfoTool' returns an article (title, summary, topic), base your answer on the provided 'summary'. Also, set the 'relatedArticleTitle' output field to the 'title' of the article found. You can additionally mention to the user that more details are available in the article titled "[Article Title]" in our Support Center.
5. If neither 'getFaqAnswer' nor 'getArticleInfoTool' provides a specific answer, then answer the question to the best of your general knowledge about caravanning. Set 'relatedArticleTitle' to null in this case.
6. Regardless of how the answer was sourced, if you believe a YouTube video would further help the user, use the 'findYoutubeLink' tool with a relevant search query to find a video link and include it in your 'youtubeLink' output field. Otherwise, set 'youtubeLink' to null.

User's Question: {{{question}}}
`,
});

const caravanSupportChatbotFlow = ai.defineFlow(
  {
    name: 'caravanSupportChatbotFlow',
    inputSchema: CaravanSupportChatbotInputSchema,
    outputSchema: CaravanSupportChatbotOutputSchema,
  },
  async (input): Promise<CaravanSupportChatbotOutput> => {
    try {
      const {output} = await prompt(input);
      if (!output) {
        console.warn('CaravanSupportChatbotFlow: AI model returned null output.');
        return { 
          answer: "I'm sorry, I had trouble generating a response in the expected format. Could you try rephrasing your question?", 
          youtubeLink: null,
          relatedArticleTitle: null,
        };
      }
      // Ensure relatedArticleTitle is explicitly null if not set by the model, as per schema
      return {
        answer: output.answer,
        youtubeLink: output.youtubeLink || null,
        relatedArticleTitle: output.relatedArticleTitle || null,
      };
    } catch (error: any) {
      console.error("Error in caravanSupportChatbotFlow calling prompt:", error);
      
      let answer = "An unexpected error occurred while communicating with the AI assistant. Please try again later.";
      if (error.message) {
        const errorMessage = error.message.toLowerCase();
        if (errorMessage.includes("service unavailable") || errorMessage.includes("overloaded") || errorMessage.includes("model is overloaded")) {
          answer = "The AI assistant is currently experiencing high demand or is temporarily unavailable. Please try again in a few moments.";
        } else if (errorMessage.includes("429") || errorMessage.includes("quota") || errorMessage.includes("rate limit")) {
          answer = "The AI assistant has hit a usage limit for the current period. Please try again later. If this issue persists, please check API plan details.";
        } else if (errorMessage.includes("api key not valid")){
           answer = "There seems to be an issue with the AI service configuration. Please contact support if this persists.";
        }
      }
      
      return { 
        answer: answer, 
        youtubeLink: null,
        relatedArticleTitle: null,
      };
    }
  }
);

