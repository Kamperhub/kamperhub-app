
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A caravan support chatbot AI agent.
 *
 * - caravanSupportChatbot - A function that handles the chatbot interaction.
 * - CaravanSupportChatbotInput - The input type for the caravanSupportChatbot function.
 * - CaravanSupportChatbotOutput - The return type for the caravanSupportChatbot function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'zod';
import { staticCaravanningArticles, type AiGeneratedArticle } from '@/types/learn';
import { adminFirestore, firebaseAdminInitError } from '@/lib/firebase-admin';
import type { LoggedTrip } from '@/types/tripplanner';
import type { Expense } from '@/types/expense';


const CaravanSupportChatbotInputSchema = z.object({
  question: z.string().describe('The question asked by the user about caravanning.'),
});
export type CaravanSupportChatbotInput = z.infer<typeof CaravanSupportChatbotInputSchema>;

const CaravanSupportChatbotOutputSchema = z.object({
  answer: z.string().describe('The answer to the user question.'),
  youtubeLink: z.string().optional().nullable().describe('An optional YouTube link that provides more information about the answer.'),
  relatedArticleTitle: z.string().optional().nullable().describe('The title of a related article from the Support Center, if applicable.')
});
export type CaravanSupportChatbotOutput = z.infer<typeof CaravanSupportChatbotOutputSchema>;

// Simple FAQ knowledge base
const faqData = [
  { 
    keywords: ["tyre pressure", "tire pressure", "tyres", "tires"], 
    answer: "Caravan tyre pressures are crucial for safety and tyre life. They typically range from 40-65 PSI, but always check the caravan's tyre placard or the tyre manufacturer's specific recommendations for your model and load. Tow vehicle tyre pressures should also be adjusted as per its placard, especially when towing." 
  },
  { 
    keywords: ["awning setup", "set up awning", "deploy awning"], 
    answer: "To set up your caravan awning: 1. Unlock any travel locks. 2. Use the awning rod to hook the pull strap and roll the awning out. 3. Extend the support legs and position them vertically or against the caravan wall. 4. Secure the legs. 5. Tension the fabric using the rafters or tensioning knobs. Ensure it's well-secured, especially if wind is expected." 
  },
  { 
    keywords: ["battery flat", "battery dead", "charge battery"], 
    answer: "If your caravan battery is flat: 1. Check if it's an issue with the charger or a blown fuse. 2. Try charging it using your tow vehicle (if set up for it), a 240V smart charger when connected to mains power, or a solar panel. 3. If it's an old battery, it might need replacement. Deep cycle batteries can be damaged if left flat for too long." 
  },
  {
    keywords: ["toilet cassette", "empty toilet"],
    answer: "To empty your caravan toilet cassette: 1. Ensure the blade valve is closed. 2. Remove the cassette from its external hatch. 3. Transport it to an approved dump point. 4. Unscrew the spout, point it downwards into the dump point, and press the air vent button to empty smoothly. 5. Rinse the cassette with water. 6. Add the appropriate toilet chemical before reinserting."
  },
  {
    keywords: ["sway control", "caravan swaying"],
    answer: "Caravan sway can be dangerous. To prevent it: 1. Ensure correct weight distribution (approx 10-15% of caravan ATM on the towball). 2. Don't overload the rear of the caravan. 3. Check tyre pressures. 4. Drive at appropriate speeds for conditions. 5. Consider using a weight distribution hitch and/or an electronic sway control system. If sway occurs, gently ease off the accelerator and apply the caravan's electric brakes manually (if fitted with a controller that allows this) â€“ do not slam on the vehicle brakes or turn the steering wheel sharply."
  }
];

const getFaqAnswer = ai.defineTool(
  {
    name: 'getFaqAnswer',
    description: 'Retrieves a pre-defined answer to a frequently asked caravanning question from the local knowledge base. Use this tool first to check for existing answers.',
    inputSchema: z.object({
      topicKeywords: z.string().describe('One or more keywords from the user question related to the topic they are asking about (e.g., "tyre pressure", "awning setup").'),
    }),
    outputSchema: z.string().optional().describe('The answer from the FAQ if a match is found, otherwise undefined.'),
  },
  async ({ topicKeywords }) => {
    const lowerTopicKeywords = topicKeywords.toLowerCase().split(/\s+/).filter(kw => kw.length > 2); // Split into words
    for (const faq of faqData) {
      if (faq.keywords.some(kw => lowerTopicKeywords.some(userKw => kw.toLowerCase().includes(userKw)))) {
        return faq.answer;
      }
    }
    return undefined; // No specific FAQ found
  }
);

const getArticleInfoTool = ai.defineTool(
  {
    name: 'getArticleInfoTool',
    description: 'Searches the static article database for relevant information based on user keywords. Use this if no direct FAQ answer is found.',
    inputSchema: z.object({
      searchKeywords: z.string().describe('Keywords from the user question to find a relevant article (e.g., "parking caravan", "battery management").'),
    }),
    outputSchema: z.object({
      title: z.string(),
      summary: z.string(), // The introduction of the article
      topic: z.string(),
    }).optional().describe('The title, introduction (as summary), and topic of a relevant article if found, otherwise undefined.'),
  },
  async ({ searchKeywords }) => {
    const lowerKeywords = searchKeywords.toLowerCase().split(/\s+/).filter(kw => kw.length > 2); // Split into words, ignore small words
    if (lowerKeywords.length === 0) return undefined;

    for (const article of staticCaravanningArticles) {
      const searchableText = `${article.topic.toLowerCase()} ${article.title.toLowerCase()} ${article.introduction.toLowerCase()}`;
      if (lowerKeywords.every(kw => searchableText.includes(kw))) { // All keywords must be present
        return {
          title: article.title,
          summary: article.introduction,
          topic: article.topic,
        };
      }
    }
    // Fallback: check if any keyword matches
     for (const article of staticCaravanningArticles) {
      const searchableText = `${article.topic.toLowerCase()} ${article.title.toLowerCase()} ${article.introduction.toLowerCase()}`;
      if (lowerKeywords.some(kw => searchableText.includes(kw))) {
        return {
          title: article.title,
          summary: article.introduction,
          topic: article.topic,
        };
      }
    }
    return undefined;
  }
);


const findYoutubeLink = ai.defineTool(
  {
    name: 'findYoutubeLink',
    description: 'Finds a relevant YouTube video link based on the user question topic. Use this if a visual explanation would be helpful.',
    inputSchema: z.object({
      searchQuery: z.string().describe('A concise search query based on the user question to find a relevant YouTube video.'),
    }),
    outputSchema: z.string().optional(),
  },
  async (input) => {
    // This is a placeholder implementation.
    if (input.searchQuery.toLowerCase().includes('weight limits')) {
      return 'https://www.youtube.com/watch?v=M7lc1UVf-VE';
    }
    if (input.searchQuery.toLowerCase().includes('awning')) {
        return 'https://www.youtube.com/watch?v=L_jWHffIx5E';
    }
    return undefined;
  }
);

const listUserTripsTool = ai.defineTool(
  {
    name: 'listUserTrips',
    description: "Lists all of the user's available trips.",
    inputSchema: z.object({
      userId: z.string().describe("The user's unique ID."),
    }),
    outputSchema: z.array(z.string()).describe("A list of trip names.").nullable(),
  },
  async ({ userId }) => {
    if (firebaseAdminInitError || !adminFirestore) {
      console.error('listUserTripsTool: Firestore is not available due to initialization error.', firebaseAdminInitError);
      return null;
    }
    try {
      const tripsRef = adminFirestore.collection('users').doc(userId).collection('trips');
      const snapshot = await tripsRef.get();
      if (snapshot.empty) return null;

      const tripNames = snapshot.docs
        .map(doc => doc.data()?.name)
        .filter((name): name is string => typeof name === 'string');
      
      return tripNames.length > 0 ? tripNames : null;
    } catch (e: any) {
        console.error('Critical error in listUserTripsTool:', e);
        return null;
    }
  }
);


const findUserTripTool = ai.defineTool(
  {
    name: 'findUserTrip',
    description: "Finds a user's trip by its name to get its ID and budget categories. Use this before trying to add an expense.",
    inputSchema: z.object({
      userId: z.string().describe("The user's unique ID."),
      tripName: z.string().describe('A partial or full name of the trip to search for.'),
    }),
    outputSchema: z.object({
      tripId: z.string(),
      tripName: z.string(),
      budgetCategories: z.array(z.string()),
    }).nullable(),
  },
  async ({ userId, tripName }) => {
    if (firebaseAdminInitError || !adminFirestore) {
      console.error('findUserTripTool: Firestore is not available due to initialization error.', firebaseAdminInitError);
      return null;
    }
    try {
      const tripsRef = adminFirestore.collection('users').doc(userId).collection('trips');
      const snapshot = await tripsRef.get();
      if (snapshot.empty) {
        return null;
      }

      const trips: LoggedTrip[] = [];
      snapshot.docs.forEach(doc => {
        const data = doc.data();
        if (data && typeof data.name === 'string' && typeof data.id === 'string') {
          trips.push(data as LoggedTrip);
        }
      });
      
      const foundTrip = trips.find(trip => trip.name.toLowerCase().includes(tripName.toLowerCase()));

      if (foundTrip) {
        return {
          tripId: foundTrip.id,
          tripName: foundTrip.name,
          budgetCategories: foundTrip.budget?.map(cat => cat.name) || [],
        };
      }
      return null;
    } catch (e: any) {
        console.error('Critical error in findUserTripTool:', e);
        return null; 
    }
  }
);

const addExpenseToTripTool = ai.defineTool(
  {
    name: 'addExpenseToTrip',
    description: 'Adds an expense record to a specific trip for a user.',
    inputSchema: z.object({
      userId: z.string().describe("The user's unique ID."),
      tripId: z.string().describe("The unique ID of the trip, obtained from findUserTrip."),
      amount: z.number().describe("The monetary value of the expense."),
      categoryName: z.string().describe("The name of the budget category for this expense."),
      description: z.string().describe("A brief description of the expense (e.g., 'Diesel fill-up', 'Groceries at Coles')."),
      expenseDate: z.string().datetime().describe("The date of the expense in ISO 8601 format."),
    }),
    outputSchema: z.string().describe("A confirmation message indicating success or failure."),
  },
  async ({ userId, tripId, amount, categoryName, description, expenseDate }) => {
    if (firebaseAdminInitError || !adminFirestore) {
      console.error('addExpenseToTripTool: Firestore is not available due to initialization error.', firebaseAdminInitError);
      return "Error: The database service is not available due to a configuration issue.";
    }
    
    const tripRef = adminFirestore.collection('users').doc(userId).collection('trips').doc(tripId);
    
    try {
      const doc = await tripRef.get();
      if (!doc.exists) {
        return `Error: Trip with ID ${tripId} not found.`;
      }
      const trip = doc.data() as LoggedTrip;

      const budgetCategory = trip.budget?.find(cat => cat.name.toLowerCase() === categoryName.toLowerCase());
      if (!budgetCategory) {
        const availableCategories = trip.budget?.map(c => c.name).join(', ') || 'none';
        return `Error: Budget category "${categoryName}" not found. Please choose from: ${availableCategories}.`;
      }

      const newExpense: Omit<Expense, 'tripId'> = {
        id: Date.now().toString(),
        categoryId: budgetCategory.id,
        amount,
        description,
        date: expenseDate,
        timestamp: new Date().toISOString(),
      };

      const updatedExpenses = [...(trip.expenses || []), newExpense];
      
      await tripRef.update({ expenses: updatedExpenses });

      return `Successfully added expense "${description}" for $${amount.toFixed(2)} to the trip "${trip.name}".`;

    } catch (e: any) {
      console.error("Error adding expense to trip:", e);
      return `An unexpected error occurred while adding the expense: ${e.message}`;
    }
  }
);


export async function caravanSupportChatbot(
  input: CaravanSupportChatbotInput,
  userId: string,
): Promise<CaravanSupportChatbotOutput> {
  return caravanSupportChatbotFlow({ ...input, userId });
}

const CaravanSupportChatbotFlowInputSchema = CaravanSupportChatbotInputSchema.extend({
  userId: z.string(),
});

const prompt = ai.definePrompt({
  name: 'caravanSupportChatbotPrompt',
  input: {schema: CaravanSupportChatbotFlowInputSchema },
  output: {schema: CaravanSupportChatbotOutputSchema},
  tools: [getFaqAnswer, getArticleInfoTool, findYoutubeLink, listUserTripsTool, findUserTripTool, addExpenseToTripTool],
  prompt: `You are a friendly and helpful caravan support chatbot for KamperHub. Your goal is to provide useful answers and perform actions for the user.

USER ID: {{{userId}}}

**Response Hierarchy:**
1.  **Action Intent:** First, check if the user wants to perform an action (e.g., "add expense"). If so, proceed to the "Performing Actions" task below.
2.  **Trip Listing Intent:** If the user asks a question like "what trips do I have?" or "what trips can I add expenses to?", use the 'listUserTripsTool'. If it returns a list of names, present them clearly to the user. If it returns null, inform the user they have no trips logged.
3.  **FAQ Check:** If it's a general question, use 'getFaqAnswer' first.
4.  **Article Check:** If no FAQ is found, use 'getArticleInfoTool'.
5.  **General Knowledge:** If no internal tools provide an answer, use your general caravanning knowledge.
6.  **YouTube Link:** As a final step, if a video would be helpful, use 'findYoutubeLink'.

**Performing Actions (e.g., Adding Expenses):**
1.  **Identify Intent:** Recognize the user wants to add an expense.
2.  **Find Trip:** If the user mentions a trip name (e.g., "Fraser Island trip"), you MUST use the 'findUserTripTool' with the user's ID and the trip name to get the trip's unique ID.
    - If the tool returns null, it means no matching trip was found. You MUST inform the user that you couldn't find that trip and ask them to try a different name or check their trip log. Do not proceed.
    - If the user doesn't mention a trip name, you must ask them for it.
3.  **Gather Details:** Once you have the trip ID, you need the expense details: amount, description, and category. If any of these are missing from the user's request, ask for them. When asking for a category, you can suggest the available categories returned by the 'findUserTripTool'.
4.  **Get Date:** Always assume today's date for the expense unless the user specifies otherwise. Format it as an ISO 8601 string.
5.  **Add Expense:** Use the 'addExpenseToTripTool' with all the gathered details (userId, tripId, amount, categoryName, description, expenseDate).
6.  **Confirm:** Relay the success or error message from the tool back to the user in a conversational way. For the final answer, do not suggest YouTube links or related articles.

Strictly follow these hierarchies. For action-based requests, focus only on completing the action.

User's Question: {{{question}}}
`,
});

const caravanSupportChatbotFlow = ai.defineFlow(
  {
    name: 'caravanSupportChatbotFlow',
    inputSchema: CaravanSupportChatbotFlowInputSchema,
    outputSchema: CaravanSupportChatbotOutputSchema,
  },
  async (input): Promise<CaravanSupportChatbotOutput> => {
    if (firebaseAdminInitError) {
      console.error("Critical: Cannot run caravanSupportChatbotFlow because Firebase Admin SDK failed to initialize.", firebaseAdminInitError);
      return { 
        answer: "I'm sorry, I'm unable to connect to the main database right now due to a server configuration issue. My ability to answer questions about your specific data is limited. Please contact support.", 
        youtubeLink: null,
        relatedArticleTitle: null,
      };
    }
    
    try {
      const {output, usage} = await prompt(input); // Include usage for detailed logging
      
      if (!output) {
        console.warn('CaravanSupportChatbotFlow: AI model returned null output. This might be due to schema mismatch or other non-fatal errors from the model.');
        return { 
          answer: "I'm sorry, I had trouble generating a response in the expected format. Could you try rephrasing your question?", 
          youtubeLink: null,
          relatedArticleTitle: null,
        };
      }
      
      return {
        answer: output.answer || "I'm not sure how to respond to that. Can you try asking differently?", // Fallback if answer is empty
        youtubeLink: output.youtubeLink || null,
        relatedArticleTitle: output.relatedArticleTitle || null,
      };
    } catch (error: any) {
      console.error("Error in caravanSupportChatbotFlow calling prompt:", error);

      let answer = "An unexpected error occurred while communicating with the AI assistant. Please try again later.";
      if (error.message) {
        const errorMessage = error.message.toLowerCase();
        if (errorMessage.includes("service unavailable") || errorMessage.includes("overloaded") || errorMessage.includes("model is overloaded") || (error.cause && typeof error.cause === 'object' && 'status' in error.cause && error.cause.status === 503) ) {
          answer = "The AI assistant is currently experiencing high demand or is temporarily unavailable. Please try again in a few moments.";
        } else if (errorMessage.includes("429") || errorMessage.includes("quota") || errorMessage.includes("rate limit") || (error.cause && typeof error.cause === 'object' && 'status' in error.cause && error.cause.status === 429)) {
          answer = "The AI assistant has hit a usage limit for the current period. Please try again later. If this issue persists, please check API plan details.";
        } else if (errorMessage.includes("api key not valid") || (error.cause && typeof error.cause === 'object' && 'status' in error.cause && (error.cause.status === 401 || error.cause.status === 403)) ){
           answer = "There seems to be an issue with the AI service configuration (e.g. API key). Please contact support if this persists.";
        } else if (errorMessage.includes("failed to parse schema") || errorMessage.includes("output_schema")) {
           answer = "I had a little trouble formatting my thoughts. Could you try asking in a slightly different way?";
        }
      }
      
      return { 
        answer: answer, 
        youtubeLink: null,
        relatedArticleTitle: null,
      };
    }
  }
);
