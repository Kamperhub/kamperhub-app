rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all access unless explicitly allowed.
    // This is a critical security best practice.
    match /{document=**} {
      allow read, write: if false;
    }

    // Secure user profile data.
    // A user can read or write their own profile document.
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      // Allow any authenticated user to create their own profile document.
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
    }

    // Secure all sub-collections belonging to a user.
    // This function ensures that any request to a sub-collection
    // is made by the authenticated owner of that data.
    function isUserAuthenticated(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Rules for all user-specific collections
    match /users/{userId}/vehicles/{vehicleId} {
      allow read, write: if isUserAuthenticated(userId);
    }
    match /users/{userId}/caravans/{caravanId} {
      allow read, write: if isUserAuthenticated(userId);
    }
    match /users/{userId}/inventories/{inventoryId} {
      allow read, write: if isUserAuthenticated(userId);
    }
    match /users/{userId}/trips/{tripId} {
      allow read, write: if isUserAuthenticated(userId);
    }
    match /users/{userId}/bookings/{bookingId} {
      allow read, write: if isUserAuthenticated(userId);
    }
    match /users/{userId}/packingLists/{listId} {
      allow read, write: if isUserAuthenticated(userId);
    }
    match /users/{userId}/journeys/{journeyId} {
      allow read, write: if isUserAuthenticated(userId);
    }

    // Allow authenticated users to create a state token for Google OAuth flow.
    // The state token is used to prevent cross-site request forgery.
    match /oauthStates/{state} {
      // Allow any authenticated user to create a state token for themselves.
      // The document ID is the random 'state' string.
      // We check that the 'userId' in the document being created matches the user's UID.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // Only the user who created the state token can read or delete it.
      allow read, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
  }
}
