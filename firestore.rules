rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the requesting user is an admin.
    function isAdmin() {
      // Check if the user document exists and if the isAdmin flag is true.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // This is the primary rule. It allows a user full read/write access to all
    // documents and subcollections under their own user ID path.
    // The {documents=**} is a recursive wildcard that matches everything underneath.
    match /users/{userId}/{documents=**} {
      allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin());
    }
    
    // These rules apply specifically to the top-level user profile document itself.
    match /users/{userId} {
      // Allow a user to create their own profile during signup.
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow a user to read or update their own profile, or allow an admin to do so.
      allow read, update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      
      // Only an admin can delete a user's top-level profile document.
      allow delete: if isAdmin();
    }

    // This rule allows users to create temporary state documents needed for
    // secure third-party OAuth flows, like connecting to Google Tasks.
    match /oauthStates/{state} {
      allow read, create, delete: if request.auth != null;
    }
  }
}
