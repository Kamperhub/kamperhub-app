
rules_version = '2';

service cloud.firestore {
  match /databases/kamperhubv2/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the requesting user is the owner of the data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // A user can create their own profile document.
      allow create: if isOwner(userId);
      
      // A user can read, update, or delete their own profile document.
      allow read, update, delete: if isOwner(userId);

      // Rules for all subcollections under a user's document (e.g., trips, vehicles)
      match /{collection}/{docId} {
        // A user can create, read, update, and delete documents in their own subcollections.
        allow read, write: if isOwner(userId);
      }
    }
    
    // Rules for Google Auth state tokens
    match /oauthStates/{state} {
      // Allow any authenticated user to create a state token for themselves.
      // The document ID is the random 'state' string.
      // We check that the 'userId' in the document being created matches the user's UID.
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // Only the user who created the state token can read or delete it.
      allow read, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Rules for contact form submissions (write-only for anyone)
    match /contactSubmissions/{submissionId} {
      allow create: if true;
      // Deny read, update, delete for all clients to protect privacy.
      allow read, update, delete: if false;
    }
  }
}
