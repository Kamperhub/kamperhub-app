rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Function to check if the requesting user is a verified admin.
    // This looks up the 'isAdmin' field in the user's own profile document.
    function isRequestingUserAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Rules for the main 'users' collection documents.
    match /users/{userId} {
      
      // Allow a user to create their own profile document. This is crucial for signup.
      allow create: if request.auth.uid == userId;
      
      // Allow a user to read, update, and delete their own profile document.
      // An admin can also read any user's profile for support purposes.
      allow read: if request.auth.uid == userId || isRequestingUserAdmin();
      allow update, delete: if request.auth.uid == userId;
      
      // Rules for all sub-collections nested under a user's document
      // (e.g., /users/{userId}/vehicles/{vehicleId}, /users/{userId}/trips/{tripId}).
      match /{allPaths=**} {
        // A user can read and write to all of their own sub-collection documents.
        // An admin can also read data from any user's sub-collections.
        allow read: if request.auth.uid == userId || isRequestingUserAdmin();
        allow write: if request.auth.uid == userId;
      }
    }
    
    // By default, all other collections (like oauthStates) are locked down and can only be
    // accessed by the server's Admin SDK, which bypasses these rules.
    // This is the intended and secure behavior.
  }
}
