
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // By default, deny all access.
    match /{document=**} {
      allow read, write: if false;
    }

    // Rules for the 'users' collection documents
    match /users/{userId} {
      // 1. Allow a user to read their own document.
      // 2. Allow an admin to read any user's document.
      allow get: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);

      // 1. Allow a user to update their own document.
      // 2. Allow an admin to update any user's document.
      allow update: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      
      // Allow any authenticated user to create their own user document during signup.
      // The UID must match the new document's ID.
      allow create: if request.auth != null && request.auth.uid == userId;

      // Only admins can delete user documents.
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;

      // Only admins can list all user documents.
      allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Rules for all subcollections under a user document (e.g., vehicles, caravans)
    match /users/{userId}/{subcollection}/{docId} {
       // Allow a user to perform any action on documents in their own subcollections.
       // Also allow an admin to do the same for any user.
       allow read, write, create, update, delete: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }
    
    // Rules for OAuth state management during Google integration
    match /oauthStates/{stateId} {
      allow read, create, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
  }
}
