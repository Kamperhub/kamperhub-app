rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ---------------------------------------------------------------------------------------------
    // Global Helper Functions: Efficient & Reliable Authentication and Role Checks
    // ---------------------------------------------------------------------------------------------

    // Checks if the user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Checks if the requesting user's UID matches the resource's owner UID.
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Checks if the requesting user has the 'admin' custom claim set on their Auth token.
    // This is the FAST, SECURE, and RELIABLE way to manage roles in rules.
    // Requires a Cloud Function to set this custom claim on the user's Firebase Auth token.
    // Example: admin.auth().setCustomUserClaims(uid, { admin: true });
    function isAdmin() {
      // If request.auth.token.admin exists and is true, returns true. Otherwise, false.
      return request.auth.token.admin == true;
    }

    // ---------------------------------------------------------------------------------------------
    // Collection: Subcollections under 'users/{userId}'
    // Manages access to user-specific data like vehicles, trips, etc.
    // Examples: /users/{userId}/vehicles/{vehicleId}, /users/{userId}/trips/{tripId}
    // This rule MUST come before the more specific `/users/{userId}` rule.
    // ---------------------------------------------------------------------------------------------
    match /users/{userId}/{subcollection}/{docId=**} {
      // A user can read all documents within their own subcollections.
      // Admins can read all documents in any user's subcollections.
      allow read: if isOwner(userId) || isAdmin();

      // A user can write (create, update, delete) documents within their own subcollections.
      // Admins should typically manage user data via trusted Cloud Functions.
      allow write: if isOwner(userId);
    }
    
    // ---------------------------------------------------------------------------------------------
    // Collection: 'users' (User Profiles)
    // Manages access to top-level user profile documents (e.g., /users/someUid).
    // ---------------------------------------------------------------------------------------------
    match /users/{userId} {
      // Allow a user to create their OWN profile document upon signup.
      // This is vital for the onboarding flow and resolves "initializing session" issues.
      // The rule checks that the user ID in the path matches the authenticated user's UID.
      allow create: if isOwner(userId);

      // Allow a user to read their OWN profile.
      // Admins can read ANY user's profile for administrative/support purposes.
      // This check is reliable because it does not rely on the document existing for the 'owner' part,
      // and the 'isAdmin' check is based on the Auth token, not a document read.
      allow read: if isOwner(userId) || isAdmin();

      // Allow a user to update or delete their OWN profile.
      // Admins should not directly delete user profiles via client rules; use a Cloud Function.
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId); // Only allow user to delete their own account/profile.
    }
    
    // ---------------------------------------------------------------------------------------------
    // Collection: 'oauthStates'
    // This collection is used for the OAuth flow state management.
    // This collection should only be accessible from the server using the Admin SDK,
    // which bypasses security rules. Client-side access is denied.
    // ---------------------------------------------------------------------------------------------
     match /oauthStates/{stateId} {
      allow read, write: if false;
    }
  }
}
