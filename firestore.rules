
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if the user is an admin
    function isAdmin() {
      // An admin user is defined by having a specific document in the 'admins' collection
      // This is a more secure way than checking a custom claim that might not be set.
      return isAuthenticated() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Secure all user data by default
    match /users/{userId} {
      // A user can only read or write their own top-level profile document.
      allow read, write: if isOwner(userId);

      // Secure all subcollections within a user's document
      match /{subcollection}/{docId} {
        // A user can only access documents within their own subcollections.
        allow read, write, delete: if isOwner(userId);
      }
    }
    
    // Rules for the 'admins' collection
    match /admins/{adminId} {
        // Only other authenticated admins can read the list of admins
        allow read: if isAdmin();
        // Writing to the admin collection should be locked down and handled manually in the console
        // or through a secure backend function for promotion/demotion.
        allow write: if false;
    }
    
    // Rules for the contact form submissions
    match /contactSubmissions/{submissionId} {
        // Allow anyone to create a contact submission
        allow create: if true;
        // Only admins can read or delete contact submissions
        allow read, delete: if isAdmin();
        // Nobody can update a submission once it's created
        allow update: if false;
    }
    
    // Rules for the OAuth state tokens used during Google Account linking
    match /oauthStates/{state} {
      // Allow any authenticated user to create a state token for themselves.
      // The document ID is the random 'state' string.
      // We check that the 'userId' in the document being created matches the user's UID.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // Only the user who created the state token can read or delete it.
      // This is used by the server callback to verify the state.
      allow read, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
  }
}
